/*******************************************************************************
 * Copyright (c) 2010, 2012 Tasktop Technologies
 * Copyright (c) 2010, 2011 SpringSource, a division of VMware
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Tasktop Technologies - initial API and implementation
 ******************************************************************************/
package com.tasktop.c2c.server.internal.tasks.domain;

// Generated May 26, 2010 11:31:55 AM by Hibernate Tools 3.3.0.GA

import java.math.BigDecimal;
import java.util.Date;
import java.util.regex.Pattern;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.PrePersist;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.eclipse.persistence.annotations.Convert;

/**
 * Longdescs generated by hbm2java
 */
@Entity
@Table(name = "longdescs")
@SuppressWarnings("serial")
public class Comment extends AbstractIdentified<Integer> implements java.io.Serializable {

	private Integer id;
	private Task task;
	private Profile profile;
	private Date creationTs;
	private BigDecimal workTime = BigDecimal.ZERO;
	private String thetext;
	private boolean isprivate;
	private boolean alreadyWrapped;
	private short type;
	private String extraData;

	public Comment() {
	}

	@Id
	@Column(name = "comment_id", unique = true, nullable = false)
	@Override
	public Integer getId() {
		return this.id;
	}

	@Override
	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "bug_id", nullable = false)
	public Task getTask() {
		return this.task;
	}

	public void setTask(Task bugs) {
		this.task = bugs;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "who", nullable = false)
	public Profile getProfile() {
		return this.profile;
	}

	public void setProfile(Profile profile) {
		this.profile = profile;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "bug_when", nullable = false, length = 19)
	public Date getCreationTs() {
		return this.creationTs;
	}

	public void setCreationTs(Date bugWhen) {
		this.creationTs = bugWhen;
	}

	@Column(name = "work_time", nullable = false, precision = 7)
	public BigDecimal getWorkTime() {
		return this.workTime;
	}

	public void setWorkTime(BigDecimal workTime) {
		this.workTime = workTime;
	}

	@Column(name = "thetext", nullable = true, length = 16777215)
	public String getThetext() {
		if (this.thetext == null) {
			return ""; // Workaround for oracle DB null == empty string
		}
		return this.thetext;
	}

	public void setThetext(String thetext) {
		this.thetext = thetext;
	}

	@Column(name = "isprivate", nullable = false)
	@Convert("booleanToByte")
	public boolean getIsprivate() {
		return this.isprivate;
	}

	public void setIsprivate(boolean isprivate) {
		this.isprivate = isprivate;
	}

	@Column(name = "already_wrapped", nullable = false)
	@Convert("booleanToByte")
	public boolean getAlreadyWrapped() {
		return this.alreadyWrapped;
	}

	public void setAlreadyWrapped(boolean alreadyWrapped) {
		this.alreadyWrapped = alreadyWrapped;
	}

	/**
	 * The type of a comment, used to identify and localize the text of comments which are automatically added by
	 * Bugzilla. 0 for a normal comment. 1 for a comment marking this bug as a duplicate of another. 2 for a comment
	 * marking another bug as a duplicate of this. 3 for a comment recording a transition to NEW by voting. 4 for a
	 * comment recording that this bug has been moved. 5. attachment added.
	 */
	@Column(name = "type", nullable = false)
	public short getType() {
		return this.type;
	}

	public void setType(short type) {
		this.type = type;
	}

	@Column(name = "extra_data")
	public String getExtraData() {
		return this.extraData;
	}

	public void setExtraData(String extraData) {
		this.extraData = extraData;
	}

	@PrePersist
	public void prePersist() {
		fillCreationTs();
	}

	/**
	 * convert line delimiters to be consistent (ie: not platform-dependant)
	 */
	public void convertLineDelimiters() {
		// bug 1115: saving a task on the web causes changes to whitespace in the description
		// http://q.tasktop.com/alm/#app/code2cloud/task/1115

		if (getThetext() != null) {
			setThetext(Pattern.compile("(\r\n|\r)").matcher(getThetext()).replaceAll("\n"));
		}
	}

	private void fillCreationTs() {
		if (creationTs == null) {
			creationTs = new Date();
		}
	}
}
