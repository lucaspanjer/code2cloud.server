/*******************************************************************************
 * Copyright (c) 2010, 2012 Tasktop Technologies
 * Copyright (c) 2010, 2011 SpringSource, a division of VMware
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Tasktop Technologies - initial API and implementation
 ******************************************************************************/
package com.tasktop.c2c.server.internal.tasks.domain;

// Generated May 26, 2010 11:31:55 AM by Hibernate Tools 3.3.0.GA

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.eclipse.persistence.annotations.Convert;

/**
 * Products generated by hbm2java
 */
@Entity
@Table(name = "products", uniqueConstraints = @UniqueConstraint(columnNames = "name"))
@SuppressWarnings("serial")
public class Product extends AbstractIdentified<Short> implements java.io.Serializable, ReferenceEntity {

	private Short id;
	private Classification classifications;
	private String name;
	private String description;
	private boolean isactive;
	private short votesperuser;
	private short maxvotesperbug;
	private short votestoconfirm;
	private String defaultmilestone;
	private boolean allowsUnconfirmed;
	private Set<Task> tasks = new HashSet<Task>(0);
	private Set<Flaginclusions> flaginclusionses = new HashSet<Flaginclusions>(0);
	private Set<Component> components = new HashSet<Component>(0);
	private List<Version> versionses = new ArrayList<Version>(0);
	private Set<GroupControlMap> groupControlMaps = new HashSet<GroupControlMap>(0);
	private List<Milestone> milestones = new ArrayList<Milestone>(0);
	private Set<Flagexclusions> flagexclusionses = new HashSet<Flagexclusions>(0);

	public Product() {
	}

	@Id
	@Column(name = "id", unique = true, nullable = false)
	@Override
	public Short getId() {
		return this.id;
	}

	@Override
	public void setId(Short id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.PERSIST)
	@JoinColumn(name = "classification_id", nullable = false)
	public Classification getClassifications() {
		return this.classifications;
	}

	public void setClassifications(Classification classifications) {
		this.classifications = classifications;
	}

	@Column(name = "name", unique = true, nullable = false, length = 64)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "description", length = 16777215)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "isactive", nullable = false)
	@Convert("booleanToByte")
	public boolean getIsactive() {
		return this.isactive;
	}

	public void setIsactive(boolean isactive) {
		this.isactive = isactive;
	}

	@Column(name = "votesperuser", nullable = false)
	public short getVotesperuser() {
		return this.votesperuser;
	}

	public void setVotesperuser(short votesperuser) {
		this.votesperuser = votesperuser;
	}

	@Column(name = "maxvotesperbug", nullable = false)
	public short getMaxvotesperbug() {
		return this.maxvotesperbug;
	}

	public void setMaxvotesperbug(short maxvotesperbug) {
		this.maxvotesperbug = maxvotesperbug;
	}

	@Column(name = "votestoconfirm", nullable = false)
	public short getVotestoconfirm() {
		return this.votestoconfirm;
	}

	public void setVotestoconfirm(short votestoconfirm) {
		this.votestoconfirm = votestoconfirm;
	}

	@Column(name = "defaultmilestone", nullable = false, length = 20)
	public String getDefaultmilestone() {
		return this.defaultmilestone;
	}

	public void setDefaultmilestone(String defaultmilestone) {
		this.defaultmilestone = defaultmilestone;
	}

	@Column(name = "allows_unconfirmed", nullable = false)
	@Convert("booleanToByte")
	public boolean getAllowsUnconfirmed() {
		return this.allowsUnconfirmed;
	}

	public void setAllowsUnconfirmed(boolean allowsUnconfirmed) {
		this.allowsUnconfirmed = allowsUnconfirmed;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "product")
	public Set<Task> getTasks() {
		return this.tasks;
	}

	public void setTasks(Set<Task> tasks) {
		this.tasks = tasks;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "products")
	public Set<Flaginclusions> getFlaginclusionses() {
		return this.flaginclusionses;
	}

	public void setFlaginclusionses(Set<Flaginclusions> flaginclusionses) {
		this.flaginclusionses = flaginclusionses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "product", cascade = CascadeType.REMOVE)
	public Set<Component> getComponents() {
		return this.components;
	}

	public void setComponents(Set<Component> components) {
		this.components = components;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "products", cascade = CascadeType.REMOVE)
	@OrderBy("id")
	public List<Version> getVersionses() {
		return this.versionses;
	}

	public void setVersionses(List<Version> versionses) {
		this.versionses = versionses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "products", cascade = CascadeType.REMOVE)
	public Set<GroupControlMap> getGroupControlMaps() {
		return this.groupControlMaps;
	}

	public void setGroupControlMaps(Set<GroupControlMap> groupControlMaps) {
		this.groupControlMaps = groupControlMaps;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "product", cascade = CascadeType.REMOVE)
	@OrderBy("sortkey")
	public List<Milestone> getMilestones() {
		return this.milestones;
	}

	public void setMilestones(List<Milestone> milestoneses) {
		this.milestones = milestoneses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "products", cascade = CascadeType.REMOVE)
	public Set<Flagexclusions> getFlagexclusionses() {
		return this.flagexclusionses;
	}

	public void setFlagexclusionses(Set<Flagexclusions> flagexclusionses) {
		this.flagexclusionses = flagexclusionses;
	}

}
